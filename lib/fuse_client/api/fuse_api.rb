=begin
#Fuse

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module FuseClient
  class FuseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Use this endpoint to generate an Asset Report for a user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAssetReportRequest] :create_asset_report_request 
    # @return [CreateAssetReportResponse]
    def create_asset_report(opts = {})
      data, _status_code, _headers = create_asset_report_with_http_info(opts)
      data
    end

    # Use this endpoint to generate an Asset Report for a user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAssetReportRequest] :create_asset_report_request 
    # @return [Array<(CreateAssetReportResponse, Integer, Hash)>] CreateAssetReportResponse data, response status code and response headers
    def create_asset_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.create_asset_report ...'
      end
      # resource path
      local_var_path = '/v1/asset_report/create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_asset_report_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAssetReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.create_asset_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#create_asset_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create entity
    # @param create_entity_request [CreateEntityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateEntityResponse]
    def create_entity(create_entity_request, opts = {})
      data, _status_code, _headers = create_entity_with_http_info(create_entity_request, opts)
      data
    end

    # Create entity
    # @param create_entity_request [CreateEntityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEntityResponse, Integer, Hash)>] CreateEntityResponse data, response status code and response headers
    def create_entity_with_http_info(create_entity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.create_entity ...'
      end
      # verify the required parameter 'create_entity_request' is set
      if @api_client.config.client_side_validation && create_entity_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_entity_request' when calling FuseApi.create_entity"
      end
      # resource path
      local_var_path = '/v1/entities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_entity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.create_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#create_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a link token to start the process of a user connecting to a specific financial institution.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateLinkTokenRequest] :create_link_token_request 
    # @return [CreateLinkTokenResponse]
    def create_link_token(opts = {})
      data, _status_code, _headers = create_link_token_with_http_info(opts)
      data
    end

    # Create a link token to start the process of a user connecting to a specific financial institution.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateLinkTokenRequest] :create_link_token_request 
    # @return [Array<(CreateLinkTokenResponse, Integer, Hash)>] CreateLinkTokenResponse data, response status code and response headers
    def create_link_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.create_link_token ...'
      end
      # resource path
      local_var_path = '/v1/link/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_link_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateLinkTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.create_link_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#create_link_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSessionRequest] :create_session_request 
    # @return [CreateSessionResponse]
    def create_session(opts = {})
      data, _status_code, _headers = create_session_with_http_info(opts)
      data
    end

    # Creates a session that returns a client_secret which is required as a parameter when initializing the Fuse SDK.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSessionRequest] :create_session_request 
    # @return [Array<(CreateSessionResponse, Integer, Hash)>] CreateSessionResponse data, response status code and response headers
    def create_session_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.create_session ...'
      end
      # resource path
      local_var_path = '/v1/session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_session_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSessionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.create_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # API to exchange a public token for an access token and financial connection id
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeFinancialConnectionsPublicTokenRequest] :exchange_financial_connections_public_token_request 
    # @return [ExchangeFinancialConnectionsPublicTokenResponse]
    def exchange_public_token(opts = {})
      data, _status_code, _headers = exchange_public_token_with_http_info(opts)
      data
    end

    # API to exchange a public token for an access token and financial connection id
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeFinancialConnectionsPublicTokenRequest] :exchange_financial_connections_public_token_request 
    # @return [Array<(ExchangeFinancialConnectionsPublicTokenResponse, Integer, Hash)>] ExchangeFinancialConnectionsPublicTokenResponse data, response status code and response headers
    def exchange_public_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.exchange_public_token ...'
      end
      # resource path
      local_var_path = '/v1/financial_connections/public_token/exchange'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'exchange_financial_connections_public_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExchangeFinancialConnectionsPublicTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.exchange_public_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#exchange_public_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the Asset Report in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [GetAssetReportRequest] :get_asset_report_request 
    # @return [GetAssetReportResponse]
    def get_asset_report(opts = {})
      data, _status_code, _headers = get_asset_report_with_http_info(opts)
      data
    end

    # Retrieves the Asset Report in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [GetAssetReportRequest] :get_asset_report_request 
    # @return [Array<(GetAssetReportResponse, Integer, Hash)>] GetAssetReportResponse data, response status code and response headers
    def get_asset_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_asset_report ...'
      end
      # resource path
      local_var_path = '/v1/asset_report'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_asset_report_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetAssetReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_asset_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_asset_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get entity
    # @param entity_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetEntityResponse]
    def get_entity(entity_id, opts = {})
      data, _status_code, _headers = get_entity_with_http_info(entity_id, opts)
      data
    end

    # Get entity
    # @param entity_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEntityResponse, Integer, Hash)>] GetEntityResponse data, response status code and response headers
    def get_entity_with_http_info(entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_entity ...'
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling FuseApi.get_entity"
      end
      # resource path
      local_var_path = '/v1/entities/{entity_id}'.sub('{' + 'entity_id' + '}', CGI.escape(entity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account details
    # @param get_financial_connections_account_details_request [GetFinancialConnectionsAccountDetailsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetFinancialConnectionsAccountDetailsResponse]
    def get_financial_connections_account_details(get_financial_connections_account_details_request, opts = {})
      data, _status_code, _headers = get_financial_connections_account_details_with_http_info(get_financial_connections_account_details_request, opts)
      data
    end

    # Get account details
    # @param get_financial_connections_account_details_request [GetFinancialConnectionsAccountDetailsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFinancialConnectionsAccountDetailsResponse, Integer, Hash)>] GetFinancialConnectionsAccountDetailsResponse data, response status code and response headers
    def get_financial_connections_account_details_with_http_info(get_financial_connections_account_details_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_financial_connections_account_details ...'
      end
      # verify the required parameter 'get_financial_connections_account_details_request' is set
      if @api_client.config.client_side_validation && get_financial_connections_account_details_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_financial_connections_account_details_request' when calling FuseApi.get_financial_connections_account_details"
      end
      # resource path
      local_var_path = '/v1/financial_connections/accounts/details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_financial_connections_account_details_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetFinancialConnectionsAccountDetailsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_financial_connections_account_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_financial_connections_account_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get accounts
    # @param get_financial_connections_accounts_request [GetFinancialConnectionsAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetFinancialConnectionsAccountsResponse]
    def get_financial_connections_accounts(get_financial_connections_accounts_request, opts = {})
      data, _status_code, _headers = get_financial_connections_accounts_with_http_info(get_financial_connections_accounts_request, opts)
      data
    end

    # Get accounts
    # @param get_financial_connections_accounts_request [GetFinancialConnectionsAccountsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFinancialConnectionsAccountsResponse, Integer, Hash)>] GetFinancialConnectionsAccountsResponse data, response status code and response headers
    def get_financial_connections_accounts_with_http_info(get_financial_connections_accounts_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_financial_connections_accounts ...'
      end
      # verify the required parameter 'get_financial_connections_accounts_request' is set
      if @api_client.config.client_side_validation && get_financial_connections_accounts_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_financial_connections_accounts_request' when calling FuseApi.get_financial_connections_accounts"
      end
      # resource path
      local_var_path = '/v1/financial_connections/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_financial_connections_accounts_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetFinancialConnectionsAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_financial_connections_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_financial_connections_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get balances
    # @param get_financial_connections_balance_request [GetFinancialConnectionsBalanceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetFinancialConnectionsAccountBalanceResponse]
    def get_financial_connections_balances(get_financial_connections_balance_request, opts = {})
      data, _status_code, _headers = get_financial_connections_balances_with_http_info(get_financial_connections_balance_request, opts)
      data
    end

    # Get balances
    # @param get_financial_connections_balance_request [GetFinancialConnectionsBalanceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFinancialConnectionsAccountBalanceResponse, Integer, Hash)>] GetFinancialConnectionsAccountBalanceResponse data, response status code and response headers
    def get_financial_connections_balances_with_http_info(get_financial_connections_balance_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_financial_connections_balances ...'
      end
      # verify the required parameter 'get_financial_connections_balance_request' is set
      if @api_client.config.client_side_validation && get_financial_connections_balance_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_financial_connections_balance_request' when calling FuseApi.get_financial_connections_balances"
      end
      # resource path
      local_var_path = '/v1/financial_connections/balances'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_financial_connections_balance_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetFinancialConnectionsAccountBalanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_financial_connections_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_financial_connections_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account owners
    # @param get_financial_connections_owners_request [GetFinancialConnectionsOwnersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetFinancialConnectionsOwnersResponse]
    def get_financial_connections_owners(get_financial_connections_owners_request, opts = {})
      data, _status_code, _headers = get_financial_connections_owners_with_http_info(get_financial_connections_owners_request, opts)
      data
    end

    # Get account owners
    # @param get_financial_connections_owners_request [GetFinancialConnectionsOwnersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFinancialConnectionsOwnersResponse, Integer, Hash)>] GetFinancialConnectionsOwnersResponse data, response status code and response headers
    def get_financial_connections_owners_with_http_info(get_financial_connections_owners_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_financial_connections_owners ...'
      end
      # verify the required parameter 'get_financial_connections_owners_request' is set
      if @api_client.config.client_side_validation && get_financial_connections_owners_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_financial_connections_owners_request' when calling FuseApi.get_financial_connections_owners"
      end
      # resource path
      local_var_path = '/v1/financial_connections/owners'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_financial_connections_owners_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetFinancialConnectionsOwnersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_financial_connections_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_financial_connections_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transactions
    # @param get_transactions_request [GetTransactionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetTransactionsResponse]
    def get_financial_connections_transactions(get_transactions_request, opts = {})
      data, _status_code, _headers = get_financial_connections_transactions_with_http_info(get_transactions_request, opts)
      data
    end

    # Get transactions
    # @param get_transactions_request [GetTransactionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTransactionsResponse, Integer, Hash)>] GetTransactionsResponse data, response status code and response headers
    def get_financial_connections_transactions_with_http_info(get_transactions_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_financial_connections_transactions ...'
      end
      # verify the required parameter 'get_transactions_request' is set
      if @api_client.config.client_side_validation && get_transactions_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_transactions_request' when calling FuseApi.get_financial_connections_transactions"
      end
      # resource path
      local_var_path = '/v1/financial_connections/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_transactions_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_financial_connections_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_financial_connections_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get investment holdings
    # @param get_investment_holdings_request [GetInvestmentHoldingsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetInvestmentHoldingsResponse]
    def get_investment_holdings(get_investment_holdings_request, opts = {})
      data, _status_code, _headers = get_investment_holdings_with_http_info(get_investment_holdings_request, opts)
      data
    end

    # Get investment holdings
    # @param get_investment_holdings_request [GetInvestmentHoldingsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetInvestmentHoldingsResponse, Integer, Hash)>] GetInvestmentHoldingsResponse data, response status code and response headers
    def get_investment_holdings_with_http_info(get_investment_holdings_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_investment_holdings ...'
      end
      # verify the required parameter 'get_investment_holdings_request' is set
      if @api_client.config.client_side_validation && get_investment_holdings_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_investment_holdings_request' when calling FuseApi.get_investment_holdings"
      end
      # resource path
      local_var_path = '/v1/financial_connections/investments/holdings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_investment_holdings_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetInvestmentHoldingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_investment_holdings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_investment_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get investment holdings
    # @param get_investment_transactions_request [GetInvestmentTransactionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetInvestmentTransactionsResponse]
    def get_investment_transactions(get_investment_transactions_request, opts = {})
      data, _status_code, _headers = get_investment_transactions_with_http_info(get_investment_transactions_request, opts)
      data
    end

    # Get investment holdings
    # @param get_investment_transactions_request [GetInvestmentTransactionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetInvestmentTransactionsResponse, Integer, Hash)>] GetInvestmentTransactionsResponse data, response status code and response headers
    def get_investment_transactions_with_http_info(get_investment_transactions_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.get_investment_transactions ...'
      end
      # verify the required parameter 'get_investment_transactions_request' is set
      if @api_client.config.client_side_validation && get_investment_transactions_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_investment_transactions_request' when calling FuseApi.get_investment_transactions"
      end
      # resource path
      local_var_path = '/v1/financial_connections/investments/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_investment_transactions_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetInvestmentTransactionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.get_investment_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#get_investment_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refreshes the Asset Report in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [RefreshAssetReportRequest] :refresh_asset_report_request 
    # @return [CreateAssetReportResponse]
    def refresh_asset_report(opts = {})
      data, _status_code, _headers = refresh_asset_report_with_http_info(opts)
      data
    end

    # Refreshes the Asset Report in JSON format.
    # @param [Hash] opts the optional parameters
    # @option opts [RefreshAssetReportRequest] :refresh_asset_report_request 
    # @return [Array<(CreateAssetReportResponse, Integer, Hash)>] CreateAssetReportResponse data, response status code and response headers
    def refresh_asset_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.refresh_asset_report ...'
      end
      # resource path
      local_var_path = '/v1/asset_report/refresh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'refresh_asset_report_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAssetReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.refresh_asset_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#refresh_asset_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync financial connections data
    # Call this endpoint upon receiving a SYNC_REQUIRED webhook. This will keep the financial connections data up to date.
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [SyncFinancialConnectionsDataResponse]
    def sync_financial_connections_data(body, opts = {})
      data, _status_code, _headers = sync_financial_connections_data_with_http_info(body, opts)
      data
    end

    # Sync financial connections data
    # Call this endpoint upon receiving a SYNC_REQUIRED webhook. This will keep the financial connections data up to date.
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyncFinancialConnectionsDataResponse, Integer, Hash)>] SyncFinancialConnectionsDataResponse data, response status code and response headers
    def sync_financial_connections_data_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.sync_financial_connections_data ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FuseApi.sync_financial_connections_data"
      end
      # resource path
      local_var_path = '/v1/financial_connections/sync'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SyncFinancialConnectionsDataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.sync_financial_connections_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#sync_financial_connections_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync transactions
    # @param sync_transactions_request [SyncTransactionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SyncTransactionsResponse]
    def sync_financial_connections_transactions(sync_transactions_request, opts = {})
      data, _status_code, _headers = sync_financial_connections_transactions_with_http_info(sync_transactions_request, opts)
      data
    end

    # Sync transactions
    # @param sync_transactions_request [SyncTransactionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyncTransactionsResponse, Integer, Hash)>] SyncTransactionsResponse data, response status code and response headers
    def sync_financial_connections_transactions_with_http_info(sync_transactions_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.sync_financial_connections_transactions ...'
      end
      # verify the required parameter 'sync_transactions_request' is set
      if @api_client.config.client_side_validation && sync_transactions_request.nil?
        fail ArgumentError, "Missing the required parameter 'sync_transactions_request' when calling FuseApi.sync_financial_connections_transactions"
      end
      # resource path
      local_var_path = '/v1/financial_connections/transactions/sync'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sync_transactions_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SyncTransactionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.sync_financial_connections_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#sync_financial_connections_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update entity
    # @param entity_id_to_update [String] 
    # @param update_entity_request [UpdateEntityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateEntityResponse]
    def update_entity(entity_id_to_update, update_entity_request, opts = {})
      data, _status_code, _headers = update_entity_with_http_info(entity_id_to_update, update_entity_request, opts)
      data
    end

    # Update entity
    # @param entity_id_to_update [String] 
    # @param update_entity_request [UpdateEntityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateEntityResponse, Integer, Hash)>] UpdateEntityResponse data, response status code and response headers
    def update_entity_with_http_info(entity_id_to_update, update_entity_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.update_entity ...'
      end
      # verify the required parameter 'entity_id_to_update' is set
      if @api_client.config.client_side_validation && entity_id_to_update.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id_to_update' when calling FuseApi.update_entity"
      end
      # verify the required parameter 'update_entity_request' is set
      if @api_client.config.client_side_validation && update_entity_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_entity_request' when calling FuseApi.update_entity"
      end
      # resource path
      local_var_path = '/v1/entities/{entity_id_to_update}'.sub('{' + 'entity_id_to_update' + '}', CGI.escape(entity_id_to_update.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_entity_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.update_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#update_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get liabilities
    # @param get_liabilities_request [GetLiabilitiesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetLiabilitiesResponse]
    def v1_financial_connections_liabilities_post(get_liabilities_request, opts = {})
      data, _status_code, _headers = v1_financial_connections_liabilities_post_with_http_info(get_liabilities_request, opts)
      data
    end

    # Get liabilities
    # @param get_liabilities_request [GetLiabilitiesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLiabilitiesResponse, Integer, Hash)>] GetLiabilitiesResponse data, response status code and response headers
    def v1_financial_connections_liabilities_post_with_http_info(get_liabilities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FuseApi.v1_financial_connections_liabilities_post ...'
      end
      # verify the required parameter 'get_liabilities_request' is set
      if @api_client.config.client_side_validation && get_liabilities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_liabilities_request' when calling FuseApi.v1_financial_connections_liabilities_post"
      end
      # resource path
      local_var_path = '/v1/financial_connections/liabilities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_liabilities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetLiabilitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['fuseApiKey', 'fuseClientId']

      new_options = opts.merge(
        :operation => :"FuseApi.v1_financial_connections_liabilities_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FuseApi#v1_financial_connections_liabilities_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
