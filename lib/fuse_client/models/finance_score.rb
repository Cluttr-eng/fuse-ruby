=begin
#Fuse

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'date'
require 'time'

module FuseClient
  class FinanceScore
    # The likelihood of a credit default. A higher score implies lower risk. The finance score and all finance score metrics are values between 0 and 1. This value is calculated by the weighted sum of the metrics below.
    attr_accessor :value

    # This quantifies a user's monthly savings habits. A lower score represents minimal savings, while a higher score indicates a user who consistently sets aside a substantial portion of their income.
    attr_accessor :savings_score

    # This assesses the consistency of a user's monthly spending. A lower score indicates variable monthly expenditure, while a higher score represents consistent spending habits.
    attr_accessor :expense_stability_score

    # This measures the regularity of a user's financial activity over a period of time. A lower score suggests limited activity, while a higher score is indicative of regular daily transactions over a long period of time.
    attr_accessor :activity_age_score

    # This evaluates the stability of a user's income. A lower score suggests inconsistent or low income, while a higher score represents high, consistent income.
    attr_accessor :income_score

    # This evaluates a user's loan repayment behaviour. A lower score is assigned to those without loan payments, while a higher score denotes consistent loan payments, such as a mortgage.
    attr_accessor :loan_payments_score

    # This quantifies a user's ability to repay debts. A lower score corresponds to missed payments, while a higher score signifies consistent debt repayment.
    attr_accessor :repayments_score

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'value' => :'value',
        :'savings_score' => :'savings_score',
        :'expense_stability_score' => :'expense_stability_score',
        :'activity_age_score' => :'activity_age_score',
        :'income_score' => :'income_score',
        :'loan_payments_score' => :'loan_payments_score',
        :'repayments_score' => :'repayments_score'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'value' => :'Float',
        :'savings_score' => :'Float',
        :'expense_stability_score' => :'Float',
        :'activity_age_score' => :'Float',
        :'income_score' => :'Float',
        :'loan_payments_score' => :'Float',
        :'repayments_score' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FuseClient::FinanceScore` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FuseClient::FinanceScore`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'savings_score')
        self.savings_score = attributes[:'savings_score']
      end

      if attributes.key?(:'expense_stability_score')
        self.expense_stability_score = attributes[:'expense_stability_score']
      end

      if attributes.key?(:'activity_age_score')
        self.activity_age_score = attributes[:'activity_age_score']
      end

      if attributes.key?(:'income_score')
        self.income_score = attributes[:'income_score']
      end

      if attributes.key?(:'loan_payments_score')
        self.loan_payments_score = attributes[:'loan_payments_score']
      end

      if attributes.key?(:'repayments_score')
        self.repayments_score = attributes[:'repayments_score']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @value.nil?
        invalid_properties.push('invalid value for "value", value cannot be nil.')
      end

      if @savings_score.nil?
        invalid_properties.push('invalid value for "savings_score", savings_score cannot be nil.')
      end

      if @expense_stability_score.nil?
        invalid_properties.push('invalid value for "expense_stability_score", expense_stability_score cannot be nil.')
      end

      if @activity_age_score.nil?
        invalid_properties.push('invalid value for "activity_age_score", activity_age_score cannot be nil.')
      end

      if @income_score.nil?
        invalid_properties.push('invalid value for "income_score", income_score cannot be nil.')
      end

      if @loan_payments_score.nil?
        invalid_properties.push('invalid value for "loan_payments_score", loan_payments_score cannot be nil.')
      end

      if @repayments_score.nil?
        invalid_properties.push('invalid value for "repayments_score", repayments_score cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @value.nil?
      return false if @savings_score.nil?
      return false if @expense_stability_score.nil?
      return false if @activity_age_score.nil?
      return false if @income_score.nil?
      return false if @loan_payments_score.nil?
      return false if @repayments_score.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          value == o.value &&
          savings_score == o.savings_score &&
          expense_stability_score == o.expense_stability_score &&
          activity_age_score == o.activity_age_score &&
          income_score == o.income_score &&
          loan_payments_score == o.loan_payments_score &&
          repayments_score == o.repayments_score
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [value, savings_score, expense_stability_score, activity_age_score, income_score, loan_payments_score, repayments_score].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FuseClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
