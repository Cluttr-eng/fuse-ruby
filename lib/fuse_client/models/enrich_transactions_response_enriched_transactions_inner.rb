=begin
#Fuse

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'date'
require 'time'

module FuseClient
  class EnrichTransactionsResponseEnrichedTransactionsInner
    # The enhanced name of the merchant.
    attr_accessor :enhanced_name

    # The original name of the merchant.
    attr_accessor :original_name

    attr_accessor :logo

    # The amount of the transaction in cents, in the currency of the account.
    attr_accessor :amount

    attr_accessor :category

    # Whether the transaction is a bill pay.
    attr_accessor :is_bill_pay

    # Whether the transaction is a direct deposit.
    attr_accessor :is_direct_deposit

    # Whether the transaction is a an expense
    attr_accessor :is_expense

    # Whether the transaction is a fee.
    attr_accessor :is_fee

    # Whether the transaction is income.
    attr_accessor :is_income

    # Whether the transaction is international.
    attr_accessor :is_international

    # This indicates whether the transaction represents an overdraft fee.
    attr_accessor :is_overdraft_fee

    # Whether the transaction is a payroll advance.
    attr_accessor :is_payroll_advance

    # Whether the transaction is a subscription.
    attr_accessor :is_subscription

    # The type of transaction
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enhanced_name' => :'enhanced_name',
        :'original_name' => :'original_name',
        :'logo' => :'logo',
        :'amount' => :'amount',
        :'category' => :'category',
        :'is_bill_pay' => :'is_bill_pay',
        :'is_direct_deposit' => :'is_direct_deposit',
        :'is_expense' => :'is_expense',
        :'is_fee' => :'is_fee',
        :'is_income' => :'is_income',
        :'is_international' => :'is_international',
        :'is_overdraft_fee' => :'is_overdraft_fee',
        :'is_payroll_advance' => :'is_payroll_advance',
        :'is_subscription' => :'is_subscription',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'enhanced_name' => :'String',
        :'original_name' => :'String',
        :'logo' => :'EnrichTransactionsResponseEnrichedTransactionsInnerLogo',
        :'amount' => :'Float',
        :'category' => :'TransactionCategory',
        :'is_bill_pay' => :'Boolean',
        :'is_direct_deposit' => :'Boolean',
        :'is_expense' => :'Boolean',
        :'is_fee' => :'Boolean',
        :'is_income' => :'Boolean',
        :'is_international' => :'Boolean',
        :'is_overdraft_fee' => :'Boolean',
        :'is_payroll_advance' => :'Boolean',
        :'is_subscription' => :'Boolean',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FuseClient::EnrichTransactionsResponseEnrichedTransactionsInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FuseClient::EnrichTransactionsResponseEnrichedTransactionsInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'enhanced_name')
        self.enhanced_name = attributes[:'enhanced_name']
      end

      if attributes.key?(:'original_name')
        self.original_name = attributes[:'original_name']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'is_bill_pay')
        self.is_bill_pay = attributes[:'is_bill_pay']
      end

      if attributes.key?(:'is_direct_deposit')
        self.is_direct_deposit = attributes[:'is_direct_deposit']
      end

      if attributes.key?(:'is_expense')
        self.is_expense = attributes[:'is_expense']
      end

      if attributes.key?(:'is_fee')
        self.is_fee = attributes[:'is_fee']
      end

      if attributes.key?(:'is_income')
        self.is_income = attributes[:'is_income']
      end

      if attributes.key?(:'is_international')
        self.is_international = attributes[:'is_international']
      end

      if attributes.key?(:'is_overdraft_fee')
        self.is_overdraft_fee = attributes[:'is_overdraft_fee']
      end

      if attributes.key?(:'is_payroll_advance')
        self.is_payroll_advance = attributes[:'is_payroll_advance']
      end

      if attributes.key?(:'is_subscription')
        self.is_subscription = attributes[:'is_subscription']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ["debit", "credit"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["debit", "credit"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enhanced_name == o.enhanced_name &&
          original_name == o.original_name &&
          logo == o.logo &&
          amount == o.amount &&
          category == o.category &&
          is_bill_pay == o.is_bill_pay &&
          is_direct_deposit == o.is_direct_deposit &&
          is_expense == o.is_expense &&
          is_fee == o.is_fee &&
          is_income == o.is_income &&
          is_international == o.is_international &&
          is_overdraft_fee == o.is_overdraft_fee &&
          is_payroll_advance == o.is_payroll_advance &&
          is_subscription == o.is_subscription &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [enhanced_name, original_name, logo, amount, category, is_bill_pay, is_direct_deposit, is_expense, is_fee, is_income, is_international, is_overdraft_fee, is_payroll_advance, is_subscription, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FuseClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
