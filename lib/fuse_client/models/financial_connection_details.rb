=begin
#Fuse

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module FuseClient
  class FinancialConnectionDetails
    # The fuse financial connection id.
    attr_accessor :id

    # Connection status of the current financial connection
    attr_accessor :connection_status

    # Last time the connection status was updated in ISO-8601 format.
    attr_accessor :connection_status_updated_at

    # Whether this is an oauth connection
    attr_accessor :is_oauth

    attr_accessor :aggregator

    attr_accessor :plaid

    attr_accessor :teller

    attr_accessor :mx

    attr_accessor :snaptrade

    attr_accessor :flinks

    attr_accessor :mono

    attr_accessor :truelayer

    attr_accessor :finverse

    attr_accessor :basiq

    attr_accessor :belvo

    attr_accessor :finicity

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'connection_status' => :'connection_status',
        :'connection_status_updated_at' => :'connection_status_updated_at',
        :'is_oauth' => :'is_oauth',
        :'aggregator' => :'aggregator',
        :'plaid' => :'plaid',
        :'teller' => :'teller',
        :'mx' => :'mx',
        :'snaptrade' => :'snaptrade',
        :'flinks' => :'flinks',
        :'mono' => :'mono',
        :'truelayer' => :'truelayer',
        :'finverse' => :'finverse',
        :'basiq' => :'basiq',
        :'belvo' => :'belvo',
        :'finicity' => :'finicity'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'connection_status' => :'String',
        :'connection_status_updated_at' => :'String',
        :'is_oauth' => :'Boolean',
        :'aggregator' => :'Aggregator',
        :'plaid' => :'FinancialConnectionDetailsPlaid',
        :'teller' => :'FinancialConnectionDetailsTeller',
        :'mx' => :'FinancialConnectionDetailsMx',
        :'snaptrade' => :'FinancialConnectionDetailsSnaptrade',
        :'flinks' => :'FinancialConnectionDetailsFlinks',
        :'mono' => :'FinancialConnectionDetailsMono',
        :'truelayer' => :'FinancialConnectionDetailsTruelayer',
        :'finverse' => :'FinancialConnectionDetailsFinverse',
        :'basiq' => :'FinancialConnectionDetailsBasiq',
        :'belvo' => :'FinancialConnectionDetailsBelvo',
        :'finicity' => :'FinancialConnectionDetailsFinicity'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FuseClient::FinancialConnectionDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FuseClient::FinancialConnectionDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'connection_status')
        self.connection_status = attributes[:'connection_status']
      end

      if attributes.key?(:'connection_status_updated_at')
        self.connection_status_updated_at = attributes[:'connection_status_updated_at']
      end

      if attributes.key?(:'is_oauth')
        self.is_oauth = attributes[:'is_oauth']
      end

      if attributes.key?(:'aggregator')
        self.aggregator = attributes[:'aggregator']
      end

      if attributes.key?(:'plaid')
        self.plaid = attributes[:'plaid']
      end

      if attributes.key?(:'teller')
        self.teller = attributes[:'teller']
      end

      if attributes.key?(:'mx')
        self.mx = attributes[:'mx']
      end

      if attributes.key?(:'snaptrade')
        self.snaptrade = attributes[:'snaptrade']
      end

      if attributes.key?(:'flinks')
        self.flinks = attributes[:'flinks']
      end

      if attributes.key?(:'mono')
        self.mono = attributes[:'mono']
      end

      if attributes.key?(:'truelayer')
        self.truelayer = attributes[:'truelayer']
      end

      if attributes.key?(:'finverse')
        self.finverse = attributes[:'finverse']
      end

      if attributes.key?(:'basiq')
        self.basiq = attributes[:'basiq']
      end

      if attributes.key?(:'belvo')
        self.belvo = attributes[:'belvo']
      end

      if attributes.key?(:'finicity')
        self.finicity = attributes[:'finicity']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @connection_status.nil?
        invalid_properties.push('invalid value for "connection_status", connection_status cannot be nil.')
      end

      if @connection_status_updated_at.nil?
        invalid_properties.push('invalid value for "connection_status_updated_at", connection_status_updated_at cannot be nil.')
      end

      if @is_oauth.nil?
        invalid_properties.push('invalid value for "is_oauth", is_oauth cannot be nil.')
      end

      if @aggregator.nil?
        invalid_properties.push('invalid value for "aggregator", aggregator cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @connection_status.nil?
      connection_status_validator = EnumAttributeValidator.new('String', ["connected", "disconnected", "finished"])
      return false unless connection_status_validator.valid?(@connection_status)
      return false if @connection_status_updated_at.nil?
      return false if @is_oauth.nil?
      return false if @aggregator.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connection_status Object to be assigned
    def connection_status=(connection_status)
      validator = EnumAttributeValidator.new('String', ["connected", "disconnected", "finished"])
      unless validator.valid?(connection_status)
        fail ArgumentError, "invalid value for \"connection_status\", must be one of #{validator.allowable_values}."
      end
      @connection_status = connection_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          connection_status == o.connection_status &&
          connection_status_updated_at == o.connection_status_updated_at &&
          is_oauth == o.is_oauth &&
          aggregator == o.aggregator &&
          plaid == o.plaid &&
          teller == o.teller &&
          mx == o.mx &&
          snaptrade == o.snaptrade &&
          flinks == o.flinks &&
          mono == o.mono &&
          truelayer == o.truelayer &&
          finverse == o.finverse &&
          basiq == o.basiq &&
          belvo == o.belvo &&
          finicity == o.finicity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, connection_status, connection_status_updated_at, is_oauth, aggregator, plaid, teller, mx, snaptrade, flinks, mono, truelayer, finverse, basiq, belvo, finicity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FuseClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
