=begin
#Fuse

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'date'
require 'time'

module FuseClient
  # Features to return in the response. If left blank, a suitable feature will be returned.
  class FinQLFeaturesRequest
    # This feature provides a basic string response containing textual information related to the query. It can be used for generic responses or when specific data structures are not necessary.
    attr_accessor :text

    # This feature provides information about a specific merchant, including the merchant's name and a numerical value related to the merchant. This could represent various metrics, such as total purchases made at that merchant, amount spent, or visits.
    attr_accessor :individual_merchant

    # This feature gives a list of data entries representing numerical values for different time periods. It can be used to show trends, values or events over time.
    attr_accessor :time_based

    # This feature provides an interest level represented as a percentage. It could reflect the account holder's level of interest in a certain merchant, product, or category, based on their transactional behavior.
    attr_accessor :interest

    # This feature provides information about the frequency of a certain event or action. It includes a specification of the time unit (day, month, or year) and the total number of occurrences in that time unit.
    attr_accessor :frequency

    # This feature presents a list of data entries showing trends over different time periods. Each entry includes a time period, the trend during that period, and the percentage change.
    attr_accessor :trend

    # This feature provides a list of top merchants based on a particular metric. Each entry in the list includes the merchant's rank, the merchant's name, and a numerical value representing the metric.
    attr_accessor :top_merchants

    # This feature provides a comparison between two entities. Each comparison includes the names of both entities, the metric being compared, and the numerical values for each merchant.
    attr_accessor :comparison

    # This feature provides a list of data entries for different categories of merchants. Each category contains a list of merchants and corresponding numerical values. This could represent various metrics such as total purchases, amount spent, or visits for each merchant within the category.
    attr_accessor :merchant_categories

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'text' => :'text',
        :'individual_merchant' => :'individual_merchant',
        :'time_based' => :'time_based',
        :'interest' => :'interest',
        :'frequency' => :'frequency',
        :'trend' => :'trend',
        :'top_merchants' => :'top_merchants',
        :'comparison' => :'comparison',
        :'merchant_categories' => :'merchant_categories'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'text' => :'Boolean',
        :'individual_merchant' => :'Boolean',
        :'time_based' => :'Boolean',
        :'interest' => :'Boolean',
        :'frequency' => :'Boolean',
        :'trend' => :'Boolean',
        :'top_merchants' => :'Boolean',
        :'comparison' => :'Boolean',
        :'merchant_categories' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `FuseClient::FinQLFeaturesRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `FuseClient::FinQLFeaturesRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'individual_merchant')
        self.individual_merchant = attributes[:'individual_merchant']
      end

      if attributes.key?(:'time_based')
        self.time_based = attributes[:'time_based']
      end

      if attributes.key?(:'interest')
        self.interest = attributes[:'interest']
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.key?(:'trend')
        self.trend = attributes[:'trend']
      end

      if attributes.key?(:'top_merchants')
        self.top_merchants = attributes[:'top_merchants']
      end

      if attributes.key?(:'comparison')
        self.comparison = attributes[:'comparison']
      end

      if attributes.key?(:'merchant_categories')
        self.merchant_categories = attributes[:'merchant_categories']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          text == o.text &&
          individual_merchant == o.individual_merchant &&
          time_based == o.time_based &&
          interest == o.interest &&
          frequency == o.frequency &&
          trend == o.trend &&
          top_merchants == o.top_merchants &&
          comparison == o.comparison &&
          merchant_categories == o.merchant_categories
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [text, individual_merchant, time_based, interest, frequency, trend, top_merchants, comparison, merchant_categories].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = FuseClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
